// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Pg = require("pg");
var Curry = require("rescript/lib/js/curry.js");
var Pg$ResPg = require("./Pg.bs.js");
var Logger$LibWeb = require("lib-web/src/Logger.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var cFILE = "Pool.res";

var PoolConnectError = /* @__PURE__ */Caml_exceptions.create("Pool-ResPg.PoolConnectError");

var QueryError = /* @__PURE__ */Caml_exceptions.create("Pool-ResPg.QueryError");

var pool = new Pg.Pool(Pg$ResPg.Pool.makeConnectionOptions("localhost", undefined, undefined, "auth", "auth", undefined));

pool.on("error", (function (err) {
        return Logger$LibWeb.errorE(cFILE, "Pg.Pool.on()", "on error", err);
      }));

function client(param) {
  return new Promise((function (resolve, _reject) {
                pool.connect(function (err, client, done) {
                      if (err == null) {
                        return resolve({
                                    TAG: /* Ok */0,
                                    _0: [
                                      client,
                                      done
                                    ]
                                  });
                      } else {
                        Logger$LibWeb.errorE(cFILE, "client()", "error, Pg.Pool.connect() failed", err);
                        Curry._1(done, undefined);
                        return resolve({
                                    TAG: /* Error */1,
                                    _0: err
                                  });
                      }
                    });
                
              }));
}

function query(queryStr, params) {
  var cFUNC = "query()";
  return new Promise((function (resolve, _reject) {
                pool.connect(function (err, client, done) {
                      if (err == null) {
                        client.query(queryStr, params, (function (err, result) {
                                if (err == null) {
                                  client.end();
                                  Curry._1(done, undefined);
                                  return resolve({
                                              TAG: /* Ok */0,
                                              _0: result
                                            });
                                } else {
                                  Logger$LibWeb.errorE(cFILE, cFUNC, "error, Pg.Client.query() failed, failed query: " + queryStr, err);
                                  client.end();
                                  Curry._1(done, undefined);
                                  return resolve({
                                              TAG: /* Error */1,
                                              _0: err
                                            });
                                }
                              }));
                        return ;
                      } else {
                        Logger$LibWeb.errorE(cFILE, cFUNC, "error, Pg.Pool.connect() failed, failed query: " + queryStr, err);
                        client.end();
                        Curry._1(done, undefined);
                        return resolve({
                                    TAG: /* Error */1,
                                    _0: err
                                  });
                      }
                    });
                
              }));
}

function connect(cb) {
  pool.connect(cb);
  
}

exports.cFILE = cFILE;
exports.PoolConnectError = PoolConnectError;
exports.QueryError = QueryError;
exports.pool = pool;
exports.client = client;
exports.query = query;
exports.connect = connect;
/* pool Not a pure module */
